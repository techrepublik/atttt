#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AttendanceKeeper.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DTRDbase")]
	public partial class DTRDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertSettingDetail(SettingDetail instance);
    partial void UpdateSettingDetail(SettingDetail instance);
    partial void DeleteSettingDetail(SettingDetail instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertEnrollee(Enrollee instance);
    partial void UpdateEnrollee(Enrollee instance);
    partial void DeleteEnrollee(Enrollee instance);
    partial void InsertHoliday(Holiday instance);
    partial void UpdateHoliday(Holiday instance);
    partial void DeleteHoliday(Holiday instance);
    partial void InsertLeave(Leave instance);
    partial void UpdateLeave(Leave instance);
    partial void DeleteLeave(Leave instance);
    partial void InsertMachineInstance(MachineInstance instance);
    partial void UpdateMachineInstance(MachineInstance instance);
    partial void DeleteMachineInstance(MachineInstance instance);
    partial void InsertMachine(Machine instance);
    partial void UpdateMachine(Machine instance);
    partial void DeleteMachine(Machine instance);
    partial void InsertMacDumpLog(MacDumpLog instance);
    partial void UpdateMacDumpLog(MacDumpLog instance);
    partial void DeleteMacDumpLog(MacDumpLog instance);
    partial void InsertMiscellaneous(Miscellaneous instance);
    partial void UpdateMiscellaneous(Miscellaneous instance);
    partial void DeleteMiscellaneous(Miscellaneous instance);
    partial void InsertDTR(DTR instance);
    partial void UpdateDTR(DTR instance);
    partial void DeleteDTR(DTR instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    #endregion
		
		public DTRDataDataContext() : 
				base(global::AttendanceKeeper.Properties.Settings.Default.DTRDbaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DTRDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DTRDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DTRDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DTRDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<SettingDetail> SettingDetails
		{
			get
			{
				return this.GetTable<SettingDetail>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Enrollee> Enrollees
		{
			get
			{
				return this.GetTable<Enrollee>();
			}
		}
		
		public System.Data.Linq.Table<Holiday> Holidays
		{
			get
			{
				return this.GetTable<Holiday>();
			}
		}
		
		public System.Data.Linq.Table<Leave> Leaves
		{
			get
			{
				return this.GetTable<Leave>();
			}
		}
		
		public System.Data.Linq.Table<MachineInstance> MachineInstances
		{
			get
			{
				return this.GetTable<MachineInstance>();
			}
		}
		
		public System.Data.Linq.Table<Machine> Machines
		{
			get
			{
				return this.GetTable<Machine>();
			}
		}
		
		public System.Data.Linq.Table<MacDumpLog> MacDumpLogs
		{
			get
			{
				return this.GetTable<MacDumpLog>();
			}
		}
		
		public System.Data.Linq.Table<Miscellaneous> Miscellaneous
		{
			get
			{
				return this.GetTable<Miscellaneous>();
			}
		}
		
		public System.Data.Linq.Table<DTR> DTRs
		{
			get
			{
				return this.GetTable<DTR>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		[Function(Name="dbo.SPLoadEnrolleeAll")]
		public ISingleResult<SPLoadEnrolleeAllResult> SPLoadEnrolleeAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SPLoadEnrolleeAllResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentId;
		
		private string _DepartmentName;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
		private EntitySet<Position> _Positions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public Department()
		{
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			OnCreated();
		}
		
		[Column(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentName", DbType="VarChar(50)")]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		[Association(Name="Department_Position", Storage="_Positions", ThisKey="DepartmentId", OtherKey="DepartmentId")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.Positions")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionId;
		
		private string _PositionName;
		
		private System.Nullable<int> _DepartmentId;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIdChanging(int value);
    partial void OnPositionIdChanged();
    partial void OnPositionNameChanging(string value);
    partial void OnPositionNameChanged();
    partial void OnDepartmentIdChanging(System.Nullable<int> value);
    partial void OnDepartmentIdChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public Position()
		{
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_PositionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this.OnPositionIdChanging(value);
					this.SendPropertyChanging();
					this._PositionId = value;
					this.SendPropertyChanged("PositionId");
					this.OnPositionIdChanged();
				}
			}
		}
		
		[Column(Storage="_PositionName", DbType="VarChar(50)")]
		public string PositionName
		{
			get
			{
				return this._PositionName;
			}
			set
			{
				if ((this._PositionName != value))
				{
					this.OnPositionNameChanging(value);
					this.SendPropertyChanging();
					this._PositionName = value;
					this.SendPropertyChanged("PositionName");
					this.OnPositionNameChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentId", DbType="Int")]
		public System.Nullable<int> DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		[Association(Name="Department_Position", Storage="_Department", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SettingDetails")]
	public partial class SettingDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingDetailId;
		
		private System.Nullable<int> _SettingId;
		
		private string _SettingDetailDay;
		
		private System.Nullable<System.DateTime> _SettingDetailAMIn01;
		
		private System.Nullable<System.DateTime> _SettingDetailAMIn02;
		
		private System.Nullable<System.DateTime> _SettingDetailAMOut01;
		
		private System.Nullable<System.DateTime> _SettingDetailAMOut02;
		
		private System.Nullable<System.DateTime> _SettingDetailPMIn01;
		
		private System.Nullable<System.DateTime> _SettingDetailPMIn02;
		
		private System.Nullable<System.DateTime> _SettingDetailPMOut01;
		
		private System.Nullable<System.DateTime> _SettingDetailPMOut02;
		
		private System.Nullable<System.DateTime> _SettingDetailOTIn01;
		
		private System.Nullable<System.DateTime> _SettingDetailOTIn02;
		
		private System.Nullable<System.DateTime> _SettingDetailOTOut01;
		
		private System.Nullable<System.DateTime> _SettingDetailOTOut02;
		
		private System.Nullable<System.DateTime> _SettingDetailINAM;
		
		private System.Nullable<System.DateTime> _SettingDetailOUTAM;
		
		private System.Nullable<System.DateTime> _SettingDetailINPM;
		
		private System.Nullable<System.DateTime> _SettingDetailOUTPM;
		
		private System.Nullable<System.DateTime> _SettingDetailINOT;
		
		private System.Nullable<System.DateTime> _SettingDetailOUTOT;
		
		private System.Nullable<bool> _SettingDetailActive;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
		private EntityRef<Setting> _Setting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingDetailIdChanging(int value);
    partial void OnSettingDetailIdChanged();
    partial void OnSettingIdChanging(System.Nullable<int> value);
    partial void OnSettingIdChanged();
    partial void OnSettingDetailDayChanging(string value);
    partial void OnSettingDetailDayChanged();
    partial void OnSettingDetailAMIn01Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailAMIn01Changed();
    partial void OnSettingDetailAMIn02Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailAMIn02Changed();
    partial void OnSettingDetailAMOut01Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailAMOut01Changed();
    partial void OnSettingDetailAMOut02Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailAMOut02Changed();
    partial void OnSettingDetailPMIn01Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailPMIn01Changed();
    partial void OnSettingDetailPMIn02Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailPMIn02Changed();
    partial void OnSettingDetailPMOut01Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailPMOut01Changed();
    partial void OnSettingDetailPMOut02Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailPMOut02Changed();
    partial void OnSettingDetailOTIn01Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailOTIn01Changed();
    partial void OnSettingDetailOTIn02Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailOTIn02Changed();
    partial void OnSettingDetailOTOut01Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailOTOut01Changed();
    partial void OnSettingDetailOTOut02Changing(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailOTOut02Changed();
    partial void OnSettingDetailINAMChanging(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailINAMChanged();
    partial void OnSettingDetailOUTAMChanging(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailOUTAMChanged();
    partial void OnSettingDetailINPMChanging(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailINPMChanged();
    partial void OnSettingDetailOUTPMChanging(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailOUTPMChanged();
    partial void OnSettingDetailINOTChanging(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailINOTChanged();
    partial void OnSettingDetailOUTOTChanging(System.Nullable<System.DateTime> value);
    partial void OnSettingDetailOUTOTChanged();
    partial void OnSettingDetailActiveChanging(System.Nullable<bool> value);
    partial void OnSettingDetailActiveChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public SettingDetail()
		{
			this._Setting = default(EntityRef<Setting>);
			OnCreated();
		}
		
		[Column(Storage="_SettingDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingDetailId
		{
			get
			{
				return this._SettingDetailId;
			}
			set
			{
				if ((this._SettingDetailId != value))
				{
					this.OnSettingDetailIdChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailId = value;
					this.SendPropertyChanged("SettingDetailId");
					this.OnSettingDetailIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingId", DbType="Int")]
		public System.Nullable<int> SettingId
		{
			get
			{
				return this._SettingId;
			}
			set
			{
				if ((this._SettingId != value))
				{
					if (this._Setting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettingIdChanging(value);
					this.SendPropertyChanging();
					this._SettingId = value;
					this.SendPropertyChanged("SettingId");
					this.OnSettingIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingDetailDay", DbType="NChar(10)")]
		public string SettingDetailDay
		{
			get
			{
				return this._SettingDetailDay;
			}
			set
			{
				if ((this._SettingDetailDay != value))
				{
					this.OnSettingDetailDayChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailDay = value;
					this.SendPropertyChanged("SettingDetailDay");
					this.OnSettingDetailDayChanged();
				}
			}
		}
		
		[Column(Storage="_SettingDetailAMIn01", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailAMIn01
		{
			get
			{
				return this._SettingDetailAMIn01;
			}
			set
			{
				if ((this._SettingDetailAMIn01 != value))
				{
					this.OnSettingDetailAMIn01Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailAMIn01 = value;
					this.SendPropertyChanged("SettingDetailAMIn01");
					this.OnSettingDetailAMIn01Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailAMIn02", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailAMIn02
		{
			get
			{
				return this._SettingDetailAMIn02;
			}
			set
			{
				if ((this._SettingDetailAMIn02 != value))
				{
					this.OnSettingDetailAMIn02Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailAMIn02 = value;
					this.SendPropertyChanged("SettingDetailAMIn02");
					this.OnSettingDetailAMIn02Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailAMOut01", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailAMOut01
		{
			get
			{
				return this._SettingDetailAMOut01;
			}
			set
			{
				if ((this._SettingDetailAMOut01 != value))
				{
					this.OnSettingDetailAMOut01Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailAMOut01 = value;
					this.SendPropertyChanged("SettingDetailAMOut01");
					this.OnSettingDetailAMOut01Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailAMOut02", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailAMOut02
		{
			get
			{
				return this._SettingDetailAMOut02;
			}
			set
			{
				if ((this._SettingDetailAMOut02 != value))
				{
					this.OnSettingDetailAMOut02Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailAMOut02 = value;
					this.SendPropertyChanged("SettingDetailAMOut02");
					this.OnSettingDetailAMOut02Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailPMIn01", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailPMIn01
		{
			get
			{
				return this._SettingDetailPMIn01;
			}
			set
			{
				if ((this._SettingDetailPMIn01 != value))
				{
					this.OnSettingDetailPMIn01Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailPMIn01 = value;
					this.SendPropertyChanged("SettingDetailPMIn01");
					this.OnSettingDetailPMIn01Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailPMIn02", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailPMIn02
		{
			get
			{
				return this._SettingDetailPMIn02;
			}
			set
			{
				if ((this._SettingDetailPMIn02 != value))
				{
					this.OnSettingDetailPMIn02Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailPMIn02 = value;
					this.SendPropertyChanged("SettingDetailPMIn02");
					this.OnSettingDetailPMIn02Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailPMOut01", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailPMOut01
		{
			get
			{
				return this._SettingDetailPMOut01;
			}
			set
			{
				if ((this._SettingDetailPMOut01 != value))
				{
					this.OnSettingDetailPMOut01Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailPMOut01 = value;
					this.SendPropertyChanged("SettingDetailPMOut01");
					this.OnSettingDetailPMOut01Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailPMOut02", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailPMOut02
		{
			get
			{
				return this._SettingDetailPMOut02;
			}
			set
			{
				if ((this._SettingDetailPMOut02 != value))
				{
					this.OnSettingDetailPMOut02Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailPMOut02 = value;
					this.SendPropertyChanged("SettingDetailPMOut02");
					this.OnSettingDetailPMOut02Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailOTIn01", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailOTIn01
		{
			get
			{
				return this._SettingDetailOTIn01;
			}
			set
			{
				if ((this._SettingDetailOTIn01 != value))
				{
					this.OnSettingDetailOTIn01Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailOTIn01 = value;
					this.SendPropertyChanged("SettingDetailOTIn01");
					this.OnSettingDetailOTIn01Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailOTIn02", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailOTIn02
		{
			get
			{
				return this._SettingDetailOTIn02;
			}
			set
			{
				if ((this._SettingDetailOTIn02 != value))
				{
					this.OnSettingDetailOTIn02Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailOTIn02 = value;
					this.SendPropertyChanged("SettingDetailOTIn02");
					this.OnSettingDetailOTIn02Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailOTOut01", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailOTOut01
		{
			get
			{
				return this._SettingDetailOTOut01;
			}
			set
			{
				if ((this._SettingDetailOTOut01 != value))
				{
					this.OnSettingDetailOTOut01Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailOTOut01 = value;
					this.SendPropertyChanged("SettingDetailOTOut01");
					this.OnSettingDetailOTOut01Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailOTOut02", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailOTOut02
		{
			get
			{
				return this._SettingDetailOTOut02;
			}
			set
			{
				if ((this._SettingDetailOTOut02 != value))
				{
					this.OnSettingDetailOTOut02Changing(value);
					this.SendPropertyChanging();
					this._SettingDetailOTOut02 = value;
					this.SendPropertyChanged("SettingDetailOTOut02");
					this.OnSettingDetailOTOut02Changed();
				}
			}
		}
		
		[Column(Storage="_SettingDetailINAM", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailINAM
		{
			get
			{
				return this._SettingDetailINAM;
			}
			set
			{
				if ((this._SettingDetailINAM != value))
				{
					this.OnSettingDetailINAMChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailINAM = value;
					this.SendPropertyChanged("SettingDetailINAM");
					this.OnSettingDetailINAMChanged();
				}
			}
		}
		
		[Column(Storage="_SettingDetailOUTAM", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailOUTAM
		{
			get
			{
				return this._SettingDetailOUTAM;
			}
			set
			{
				if ((this._SettingDetailOUTAM != value))
				{
					this.OnSettingDetailOUTAMChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailOUTAM = value;
					this.SendPropertyChanged("SettingDetailOUTAM");
					this.OnSettingDetailOUTAMChanged();
				}
			}
		}
		
		[Column(Storage="_SettingDetailINPM", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailINPM
		{
			get
			{
				return this._SettingDetailINPM;
			}
			set
			{
				if ((this._SettingDetailINPM != value))
				{
					this.OnSettingDetailINPMChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailINPM = value;
					this.SendPropertyChanged("SettingDetailINPM");
					this.OnSettingDetailINPMChanged();
				}
			}
		}
		
		[Column(Storage="_SettingDetailOUTPM", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailOUTPM
		{
			get
			{
				return this._SettingDetailOUTPM;
			}
			set
			{
				if ((this._SettingDetailOUTPM != value))
				{
					this.OnSettingDetailOUTPMChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailOUTPM = value;
					this.SendPropertyChanged("SettingDetailOUTPM");
					this.OnSettingDetailOUTPMChanged();
				}
			}
		}
		
		[Column(Storage="_SettingDetailINOT", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailINOT
		{
			get
			{
				return this._SettingDetailINOT;
			}
			set
			{
				if ((this._SettingDetailINOT != value))
				{
					this.OnSettingDetailINOTChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailINOT = value;
					this.SendPropertyChanged("SettingDetailINOT");
					this.OnSettingDetailINOTChanged();
				}
			}
		}
		
		[Column(Storage="_SettingDetailOUTOT", DbType="DateTime")]
		public System.Nullable<System.DateTime> SettingDetailOUTOT
		{
			get
			{
				return this._SettingDetailOUTOT;
			}
			set
			{
				if ((this._SettingDetailOUTOT != value))
				{
					this.OnSettingDetailOUTOTChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailOUTOT = value;
					this.SendPropertyChanged("SettingDetailOUTOT");
					this.OnSettingDetailOUTOTChanged();
				}
			}
		}
		
		[Column(Storage="_SettingDetailActive", DbType="Bit")]
		public System.Nullable<bool> SettingDetailActive
		{
			get
			{
				return this._SettingDetailActive;
			}
			set
			{
				if ((this._SettingDetailActive != value))
				{
					this.OnSettingDetailActiveChanging(value);
					this.SendPropertyChanging();
					this._SettingDetailActive = value;
					this.SendPropertyChanged("SettingDetailActive");
					this.OnSettingDetailActiveChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		[Association(Name="Setting_SettingDetail", Storage="_Setting", ThisKey="SettingId", OtherKey="SettingId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Setting Setting
		{
			get
			{
				return this._Setting.Entity;
			}
			set
			{
				Setting previousValue = this._Setting.Entity;
				if (((previousValue != value) 
							|| (this._Setting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Setting.Entity = null;
						previousValue.SettingDetails.Remove(this);
					}
					this._Setting.Entity = value;
					if ((value != null))
					{
						value.SettingDetails.Add(this);
						this._SettingId = value.SettingId;
					}
					else
					{
						this._SettingId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Setting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingId;
		
		private string _SettingName;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EdtiedOn;
		
		private EntitySet<SettingDetail> _SettingDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingIdChanging(int value);
    partial void OnSettingIdChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEdtiedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEdtiedOnChanged();
    #endregion
		
		public Setting()
		{
			this._SettingDetails = new EntitySet<SettingDetail>(new Action<SettingDetail>(this.attach_SettingDetails), new Action<SettingDetail>(this.detach_SettingDetails));
			OnCreated();
		}
		
		[Column(Storage="_SettingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingId
		{
			get
			{
				return this._SettingId;
			}
			set
			{
				if ((this._SettingId != value))
				{
					this.OnSettingIdChanging(value);
					this.SendPropertyChanging();
					this._SettingId = value;
					this.SendPropertyChanged("SettingId");
					this.OnSettingIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingName", DbType="VarChar(50)")]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EdtiedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EdtiedOn
		{
			get
			{
				return this._EdtiedOn;
			}
			set
			{
				if ((this._EdtiedOn != value))
				{
					this.OnEdtiedOnChanging(value);
					this.SendPropertyChanging();
					this._EdtiedOn = value;
					this.SendPropertyChanged("EdtiedOn");
					this.OnEdtiedOnChanged();
				}
			}
		}
		
		[Association(Name="Setting_SettingDetail", Storage="_SettingDetails", ThisKey="SettingId", OtherKey="SettingId")]
		public EntitySet<SettingDetail> SettingDetails
		{
			get
			{
				return this._SettingDetails;
			}
			set
			{
				this._SettingDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SettingDetails(SettingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Setting = this;
		}
		
		private void detach_SettingDetails(SettingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Setting = null;
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Nullable<bool> _Active;
		
		private string _Level;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnLevelChanging(string value);
    partial void OnLevelChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="NChar(10)")]
		public string Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Enrollees")]
	public partial class Enrollee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnrolleeId;
		
		private System.Nullable<int> _EnrolleeNo;
		
		private string _EnrolleeIdNo;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _Sex;
		
		private string _Address;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<System.DateTime> _DateHired;
		
		private System.Nullable<int> _DepartmentId;
		
		private System.Nullable<int> _PositionId;
		
		private System.Nullable<int> _SettingId;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Data.Linq.Binary _Picture;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
		private EntitySet<Leave> _Leaves;
		
		private EntitySet<Machine> _Machines;
		
		private EntitySet<DTR> _DTRs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnrolleeIdChanging(int value);
    partial void OnEnrolleeIdChanged();
    partial void OnEnrolleeNoChanging(System.Nullable<int> value);
    partial void OnEnrolleeNoChanged();
    partial void OnEnrolleeIdNoChanging(string value);
    partial void OnEnrolleeIdNoChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnDateHiredChanging(System.Nullable<System.DateTime> value);
    partial void OnDateHiredChanged();
    partial void OnDepartmentIdChanging(System.Nullable<int> value);
    partial void OnDepartmentIdChanged();
    partial void OnPositionIdChanging(System.Nullable<int> value);
    partial void OnPositionIdChanged();
    partial void OnSettingIdChanging(System.Nullable<int> value);
    partial void OnSettingIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnPictureChanging(System.Data.Linq.Binary value);
    partial void OnPictureChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public Enrollee()
		{
			this._Leaves = new EntitySet<Leave>(new Action<Leave>(this.attach_Leaves), new Action<Leave>(this.detach_Leaves));
			this._Machines = new EntitySet<Machine>(new Action<Machine>(this.attach_Machines), new Action<Machine>(this.detach_Machines));
			this._DTRs = new EntitySet<DTR>(new Action<DTR>(this.attach_DTRs), new Action<DTR>(this.detach_DTRs));
			OnCreated();
		}
		
		[Column(Storage="_EnrolleeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnrolleeId
		{
			get
			{
				return this._EnrolleeId;
			}
			set
			{
				if ((this._EnrolleeId != value))
				{
					this.OnEnrolleeIdChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeId = value;
					this.SendPropertyChanged("EnrolleeId");
					this.OnEnrolleeIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeNo", DbType="Int")]
		public System.Nullable<int> EnrolleeNo
		{
			get
			{
				return this._EnrolleeNo;
			}
			set
			{
				if ((this._EnrolleeNo != value))
				{
					this.OnEnrolleeNoChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeNo = value;
					this.SendPropertyChanged("EnrolleeNo");
					this.OnEnrolleeNoChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeIdNo", DbType="NChar(15)")]
		public string EnrolleeIdNo
		{
			get
			{
				return this._EnrolleeIdNo;
			}
			set
			{
				if ((this._EnrolleeIdNo != value))
				{
					this.OnEnrolleeIdNoChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeIdNo = value;
					this.SendPropertyChanged("EnrolleeIdNo");
					this.OnEnrolleeIdNoChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NChar(30)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="NChar(30)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="NChar(10)")]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_DateHired", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateHired
		{
			get
			{
				return this._DateHired;
			}
			set
			{
				if ((this._DateHired != value))
				{
					this.OnDateHiredChanging(value);
					this.SendPropertyChanging();
					this._DateHired = value;
					this.SendPropertyChanged("DateHired");
					this.OnDateHiredChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentId", DbType="Int")]
		public System.Nullable<int> DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_PositionId", DbType="Int")]
		public System.Nullable<int> PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this.OnPositionIdChanging(value);
					this.SendPropertyChanging();
					this._PositionId = value;
					this.SendPropertyChanged("PositionId");
					this.OnPositionIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingId", DbType="Int")]
		public System.Nullable<int> SettingId
		{
			get
			{
				return this._SettingId;
			}
			set
			{
				if ((this._SettingId != value))
				{
					this.OnSettingIdChanging(value);
					this.SendPropertyChanging();
					this._SettingId = value;
					this.SendPropertyChanged("SettingId");
					this.OnSettingIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		[Association(Name="Enrollee_Leave", Storage="_Leaves", ThisKey="EnrolleeId", OtherKey="EnrolleeId")]
		public EntitySet<Leave> Leaves
		{
			get
			{
				return this._Leaves;
			}
			set
			{
				this._Leaves.Assign(value);
			}
		}
		
		[Association(Name="Enrollee_Machine", Storage="_Machines", ThisKey="EnrolleeId", OtherKey="EnrolleeId")]
		public EntitySet<Machine> Machines
		{
			get
			{
				return this._Machines;
			}
			set
			{
				this._Machines.Assign(value);
			}
		}
		
		[Association(Name="Enrollee_DTR", Storage="_DTRs", ThisKey="EnrolleeId", OtherKey="EnrolleeId")]
		public EntitySet<DTR> DTRs
		{
			get
			{
				return this._DTRs;
			}
			set
			{
				this._DTRs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Leaves(Leave entity)
		{
			this.SendPropertyChanging();
			entity.Enrollee = this;
		}
		
		private void detach_Leaves(Leave entity)
		{
			this.SendPropertyChanging();
			entity.Enrollee = null;
		}
		
		private void attach_Machines(Machine entity)
		{
			this.SendPropertyChanging();
			entity.Enrollee = this;
		}
		
		private void detach_Machines(Machine entity)
		{
			this.SendPropertyChanging();
			entity.Enrollee = null;
		}
		
		private void attach_DTRs(DTR entity)
		{
			this.SendPropertyChanging();
			entity.Enrollee = this;
		}
		
		private void detach_DTRs(DTR entity)
		{
			this.SendPropertyChanging();
			entity.Enrollee = null;
		}
	}
	
	[Table(Name="dbo.Holidays")]
	public partial class Holiday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HolidayId;
		
		private System.Nullable<System.DateTime> _HolidayDate;
		
		private System.Nullable<bool> _HolidayActive;
		
		private string _HolidayType;
		
		private string _HolidayNote;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHolidayIdChanging(int value);
    partial void OnHolidayIdChanged();
    partial void OnHolidayDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHolidayDateChanged();
    partial void OnHolidayActiveChanging(System.Nullable<bool> value);
    partial void OnHolidayActiveChanged();
    partial void OnHolidayTypeChanging(string value);
    partial void OnHolidayTypeChanged();
    partial void OnHolidayNoteChanging(string value);
    partial void OnHolidayNoteChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public Holiday()
		{
			OnCreated();
		}
		
		[Column(Storage="_HolidayId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HolidayId
		{
			get
			{
				return this._HolidayId;
			}
			set
			{
				if ((this._HolidayId != value))
				{
					this.OnHolidayIdChanging(value);
					this.SendPropertyChanging();
					this._HolidayId = value;
					this.SendPropertyChanged("HolidayId");
					this.OnHolidayIdChanged();
				}
			}
		}
		
		[Column(Storage="_HolidayDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HolidayDate
		{
			get
			{
				return this._HolidayDate;
			}
			set
			{
				if ((this._HolidayDate != value))
				{
					this.OnHolidayDateChanging(value);
					this.SendPropertyChanging();
					this._HolidayDate = value;
					this.SendPropertyChanged("HolidayDate");
					this.OnHolidayDateChanged();
				}
			}
		}
		
		[Column(Storage="_HolidayActive", DbType="Bit")]
		public System.Nullable<bool> HolidayActive
		{
			get
			{
				return this._HolidayActive;
			}
			set
			{
				if ((this._HolidayActive != value))
				{
					this.OnHolidayActiveChanging(value);
					this.SendPropertyChanging();
					this._HolidayActive = value;
					this.SendPropertyChanged("HolidayActive");
					this.OnHolidayActiveChanged();
				}
			}
		}
		
		[Column(Storage="_HolidayType", DbType="VarChar(50)")]
		public string HolidayType
		{
			get
			{
				return this._HolidayType;
			}
			set
			{
				if ((this._HolidayType != value))
				{
					this.OnHolidayTypeChanging(value);
					this.SendPropertyChanging();
					this._HolidayType = value;
					this.SendPropertyChanged("HolidayType");
					this.OnHolidayTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HolidayNote", DbType="VarChar(100)")]
		public string HolidayNote
		{
			get
			{
				return this._HolidayNote;
			}
			set
			{
				if ((this._HolidayNote != value))
				{
					this.OnHolidayNoteChanging(value);
					this.SendPropertyChanging();
					this._HolidayNote = value;
					this.SendPropertyChanged("HolidayNote");
					this.OnHolidayNoteChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Leaves")]
	public partial class Leave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeaveId;
		
		private System.Nullable<int> _EnrolleeId;
		
		private string _LeaveNo;
		
		private System.Nullable<System.DateTime> _LeaveDateFrom;
		
		private System.Nullable<System.DateTime> _LeaveDateTo;
		
		private string _LeaveType;
		
		private System.Nullable<int> _LeaveNoDays;
		
		private string _LeaveReason;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
		private EntityRef<Enrollee> _Enrollee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeaveIdChanging(int value);
    partial void OnLeaveIdChanged();
    partial void OnEnrolleeIdChanging(System.Nullable<int> value);
    partial void OnEnrolleeIdChanged();
    partial void OnLeaveNoChanging(string value);
    partial void OnLeaveNoChanged();
    partial void OnLeaveDateFromChanging(System.Nullable<System.DateTime> value);
    partial void OnLeaveDateFromChanged();
    partial void OnLeaveDateToChanging(System.Nullable<System.DateTime> value);
    partial void OnLeaveDateToChanged();
    partial void OnLeaveTypeChanging(string value);
    partial void OnLeaveTypeChanged();
    partial void OnLeaveNoDaysChanging(System.Nullable<int> value);
    partial void OnLeaveNoDaysChanged();
    partial void OnLeaveReasonChanging(string value);
    partial void OnLeaveReasonChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public Leave()
		{
			this._Enrollee = default(EntityRef<Enrollee>);
			OnCreated();
		}
		
		[Column(Storage="_LeaveId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeaveId
		{
			get
			{
				return this._LeaveId;
			}
			set
			{
				if ((this._LeaveId != value))
				{
					this.OnLeaveIdChanging(value);
					this.SendPropertyChanging();
					this._LeaveId = value;
					this.SendPropertyChanged("LeaveId");
					this.OnLeaveIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeId", DbType="Int")]
		public System.Nullable<int> EnrolleeId
		{
			get
			{
				return this._EnrolleeId;
			}
			set
			{
				if ((this._EnrolleeId != value))
				{
					if (this._Enrollee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrolleeIdChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeId = value;
					this.SendPropertyChanged("EnrolleeId");
					this.OnEnrolleeIdChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveNo", DbType="NChar(15)")]
		public string LeaveNo
		{
			get
			{
				return this._LeaveNo;
			}
			set
			{
				if ((this._LeaveNo != value))
				{
					this.OnLeaveNoChanging(value);
					this.SendPropertyChanging();
					this._LeaveNo = value;
					this.SendPropertyChanged("LeaveNo");
					this.OnLeaveNoChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveDateFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> LeaveDateFrom
		{
			get
			{
				return this._LeaveDateFrom;
			}
			set
			{
				if ((this._LeaveDateFrom != value))
				{
					this.OnLeaveDateFromChanging(value);
					this.SendPropertyChanging();
					this._LeaveDateFrom = value;
					this.SendPropertyChanged("LeaveDateFrom");
					this.OnLeaveDateFromChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveDateTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> LeaveDateTo
		{
			get
			{
				return this._LeaveDateTo;
			}
			set
			{
				if ((this._LeaveDateTo != value))
				{
					this.OnLeaveDateToChanging(value);
					this.SendPropertyChanging();
					this._LeaveDateTo = value;
					this.SendPropertyChanged("LeaveDateTo");
					this.OnLeaveDateToChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveType", DbType="VarChar(50)")]
		public string LeaveType
		{
			get
			{
				return this._LeaveType;
			}
			set
			{
				if ((this._LeaveType != value))
				{
					this.OnLeaveTypeChanging(value);
					this.SendPropertyChanging();
					this._LeaveType = value;
					this.SendPropertyChanged("LeaveType");
					this.OnLeaveTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveNoDays", DbType="Int")]
		public System.Nullable<int> LeaveNoDays
		{
			get
			{
				return this._LeaveNoDays;
			}
			set
			{
				if ((this._LeaveNoDays != value))
				{
					this.OnLeaveNoDaysChanging(value);
					this.SendPropertyChanging();
					this._LeaveNoDays = value;
					this.SendPropertyChanged("LeaveNoDays");
					this.OnLeaveNoDaysChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveReason", DbType="VarChar(100)")]
		public string LeaveReason
		{
			get
			{
				return this._LeaveReason;
			}
			set
			{
				if ((this._LeaveReason != value))
				{
					this.OnLeaveReasonChanging(value);
					this.SendPropertyChanging();
					this._LeaveReason = value;
					this.SendPropertyChanged("LeaveReason");
					this.OnLeaveReasonChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		[Association(Name="Enrollee_Leave", Storage="_Enrollee", ThisKey="EnrolleeId", OtherKey="EnrolleeId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Enrollee Enrollee
		{
			get
			{
				return this._Enrollee.Entity;
			}
			set
			{
				Enrollee previousValue = this._Enrollee.Entity;
				if (((previousValue != value) 
							|| (this._Enrollee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enrollee.Entity = null;
						previousValue.Leaves.Remove(this);
					}
					this._Enrollee.Entity = value;
					if ((value != null))
					{
						value.Leaves.Add(this);
						this._EnrolleeId = value.EnrolleeId;
					}
					else
					{
						this._EnrolleeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enrollee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MachineInstances")]
	public partial class MachineInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MachineInsId;
		
		private string _MachineInstanceName;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
		private EntitySet<Machine> _Machines;
		
		private EntitySet<MacDumpLog> _MacDumpLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMachineInsIdChanging(int value);
    partial void OnMachineInsIdChanged();
    partial void OnMachineInstanceNameChanging(string value);
    partial void OnMachineInstanceNameChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public MachineInstance()
		{
			this._Machines = new EntitySet<Machine>(new Action<Machine>(this.attach_Machines), new Action<Machine>(this.detach_Machines));
			this._MacDumpLogs = new EntitySet<MacDumpLog>(new Action<MacDumpLog>(this.attach_MacDumpLogs), new Action<MacDumpLog>(this.detach_MacDumpLogs));
			OnCreated();
		}
		
		[Column(Storage="_MachineInsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MachineInsId
		{
			get
			{
				return this._MachineInsId;
			}
			set
			{
				if ((this._MachineInsId != value))
				{
					this.OnMachineInsIdChanging(value);
					this.SendPropertyChanging();
					this._MachineInsId = value;
					this.SendPropertyChanged("MachineInsId");
					this.OnMachineInsIdChanged();
				}
			}
		}
		
		[Column(Storage="_MachineInstanceName", DbType="VarChar(50)")]
		public string MachineInstanceName
		{
			get
			{
				return this._MachineInstanceName;
			}
			set
			{
				if ((this._MachineInstanceName != value))
				{
					this.OnMachineInstanceNameChanging(value);
					this.SendPropertyChanging();
					this._MachineInstanceName = value;
					this.SendPropertyChanged("MachineInstanceName");
					this.OnMachineInstanceNameChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		[Association(Name="MachineInstance_Machine", Storage="_Machines", ThisKey="MachineInsId", OtherKey="MachineInsId")]
		public EntitySet<Machine> Machines
		{
			get
			{
				return this._Machines;
			}
			set
			{
				this._Machines.Assign(value);
			}
		}
		
		[Association(Name="MachineInstance_MacDumpLog", Storage="_MacDumpLogs", ThisKey="MachineInsId", OtherKey="MachineInsId")]
		public EntitySet<MacDumpLog> MacDumpLogs
		{
			get
			{
				return this._MacDumpLogs;
			}
			set
			{
				this._MacDumpLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Machines(Machine entity)
		{
			this.SendPropertyChanging();
			entity.MachineInstance = this;
		}
		
		private void detach_Machines(Machine entity)
		{
			this.SendPropertyChanging();
			entity.MachineInstance = null;
		}
		
		private void attach_MacDumpLogs(MacDumpLog entity)
		{
			this.SendPropertyChanging();
			entity.MachineInstance = this;
		}
		
		private void detach_MacDumpLogs(MacDumpLog entity)
		{
			this.SendPropertyChanging();
			entity.MachineInstance = null;
		}
	}
	
	[Table(Name="dbo.Machines")]
	public partial class Machine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MachineId;
		
		private System.Nullable<int> _EnrolleeId;
		
		private System.Nullable<int> _MachineInsId;
		
		private System.Nullable<int> _MachineNo;
		
		private System.Nullable<int> _EnrolleeNo;
		
		private System.Nullable<int> _IYear;
		
		private System.Nullable<int> _IMonth;
		
		private System.Nullable<int> _IDay;
		
		private System.Nullable<int> _IHour;
		
		private System.Nullable<int> _IMin;
		
		private System.Nullable<int> _ISecond;
		
		private System.Nullable<int> _InOutCode;
		
		private System.Nullable<int> _VerifyCode;
		
		private EntityRef<Enrollee> _Enrollee;
		
		private EntityRef<MachineInstance> _MachineInstance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMachineIdChanging(int value);
    partial void OnMachineIdChanged();
    partial void OnEnrolleeIdChanging(System.Nullable<int> value);
    partial void OnEnrolleeIdChanged();
    partial void OnMachineInsIdChanging(System.Nullable<int> value);
    partial void OnMachineInsIdChanged();
    partial void OnMachineNoChanging(System.Nullable<int> value);
    partial void OnMachineNoChanged();
    partial void OnEnrolleeNoChanging(System.Nullable<int> value);
    partial void OnEnrolleeNoChanged();
    partial void OnIYearChanging(System.Nullable<int> value);
    partial void OnIYearChanged();
    partial void OnIMonthChanging(System.Nullable<int> value);
    partial void OnIMonthChanged();
    partial void OnIDayChanging(System.Nullable<int> value);
    partial void OnIDayChanged();
    partial void OnIHourChanging(System.Nullable<int> value);
    partial void OnIHourChanged();
    partial void OnIMinChanging(System.Nullable<int> value);
    partial void OnIMinChanged();
    partial void OnISecondChanging(System.Nullable<int> value);
    partial void OnISecondChanged();
    partial void OnInOutCodeChanging(System.Nullable<int> value);
    partial void OnInOutCodeChanged();
    partial void OnVerifyCodeChanging(System.Nullable<int> value);
    partial void OnVerifyCodeChanged();
    #endregion
		
		public Machine()
		{
			this._Enrollee = default(EntityRef<Enrollee>);
			this._MachineInstance = default(EntityRef<MachineInstance>);
			OnCreated();
		}
		
		[Column(Storage="_MachineId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MachineId
		{
			get
			{
				return this._MachineId;
			}
			set
			{
				if ((this._MachineId != value))
				{
					this.OnMachineIdChanging(value);
					this.SendPropertyChanging();
					this._MachineId = value;
					this.SendPropertyChanged("MachineId");
					this.OnMachineIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeId", DbType="Int")]
		public System.Nullable<int> EnrolleeId
		{
			get
			{
				return this._EnrolleeId;
			}
			set
			{
				if ((this._EnrolleeId != value))
				{
					if (this._Enrollee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrolleeIdChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeId = value;
					this.SendPropertyChanged("EnrolleeId");
					this.OnEnrolleeIdChanged();
				}
			}
		}
		
		[Column(Storage="_MachineInsId", DbType="Int")]
		public System.Nullable<int> MachineInsId
		{
			get
			{
				return this._MachineInsId;
			}
			set
			{
				if ((this._MachineInsId != value))
				{
					if (this._MachineInstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineInsIdChanging(value);
					this.SendPropertyChanging();
					this._MachineInsId = value;
					this.SendPropertyChanged("MachineInsId");
					this.OnMachineInsIdChanged();
				}
			}
		}
		
		[Column(Storage="_MachineNo", DbType="Int")]
		public System.Nullable<int> MachineNo
		{
			get
			{
				return this._MachineNo;
			}
			set
			{
				if ((this._MachineNo != value))
				{
					this.OnMachineNoChanging(value);
					this.SendPropertyChanging();
					this._MachineNo = value;
					this.SendPropertyChanged("MachineNo");
					this.OnMachineNoChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeNo", DbType="Int")]
		public System.Nullable<int> EnrolleeNo
		{
			get
			{
				return this._EnrolleeNo;
			}
			set
			{
				if ((this._EnrolleeNo != value))
				{
					this.OnEnrolleeNoChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeNo = value;
					this.SendPropertyChanged("EnrolleeNo");
					this.OnEnrolleeNoChanged();
				}
			}
		}
		
		[Column(Storage="_IYear", DbType="Int")]
		public System.Nullable<int> IYear
		{
			get
			{
				return this._IYear;
			}
			set
			{
				if ((this._IYear != value))
				{
					this.OnIYearChanging(value);
					this.SendPropertyChanging();
					this._IYear = value;
					this.SendPropertyChanged("IYear");
					this.OnIYearChanged();
				}
			}
		}
		
		[Column(Storage="_IMonth", DbType="Int")]
		public System.Nullable<int> IMonth
		{
			get
			{
				return this._IMonth;
			}
			set
			{
				if ((this._IMonth != value))
				{
					this.OnIMonthChanging(value);
					this.SendPropertyChanging();
					this._IMonth = value;
					this.SendPropertyChanged("IMonth");
					this.OnIMonthChanged();
				}
			}
		}
		
		[Column(Storage="_IDay", DbType="Int")]
		public System.Nullable<int> IDay
		{
			get
			{
				return this._IDay;
			}
			set
			{
				if ((this._IDay != value))
				{
					this.OnIDayChanging(value);
					this.SendPropertyChanging();
					this._IDay = value;
					this.SendPropertyChanged("IDay");
					this.OnIDayChanged();
				}
			}
		}
		
		[Column(Storage="_IHour", DbType="Int")]
		public System.Nullable<int> IHour
		{
			get
			{
				return this._IHour;
			}
			set
			{
				if ((this._IHour != value))
				{
					this.OnIHourChanging(value);
					this.SendPropertyChanging();
					this._IHour = value;
					this.SendPropertyChanged("IHour");
					this.OnIHourChanged();
				}
			}
		}
		
		[Column(Storage="_IMin", DbType="Int")]
		public System.Nullable<int> IMin
		{
			get
			{
				return this._IMin;
			}
			set
			{
				if ((this._IMin != value))
				{
					this.OnIMinChanging(value);
					this.SendPropertyChanging();
					this._IMin = value;
					this.SendPropertyChanged("IMin");
					this.OnIMinChanged();
				}
			}
		}
		
		[Column(Storage="_ISecond", DbType="Int")]
		public System.Nullable<int> ISecond
		{
			get
			{
				return this._ISecond;
			}
			set
			{
				if ((this._ISecond != value))
				{
					this.OnISecondChanging(value);
					this.SendPropertyChanging();
					this._ISecond = value;
					this.SendPropertyChanged("ISecond");
					this.OnISecondChanged();
				}
			}
		}
		
		[Column(Storage="_InOutCode", DbType="Int")]
		public System.Nullable<int> InOutCode
		{
			get
			{
				return this._InOutCode;
			}
			set
			{
				if ((this._InOutCode != value))
				{
					this.OnInOutCodeChanging(value);
					this.SendPropertyChanging();
					this._InOutCode = value;
					this.SendPropertyChanged("InOutCode");
					this.OnInOutCodeChanged();
				}
			}
		}
		
		[Column(Storage="_VerifyCode", DbType="Int")]
		public System.Nullable<int> VerifyCode
		{
			get
			{
				return this._VerifyCode;
			}
			set
			{
				if ((this._VerifyCode != value))
				{
					this.OnVerifyCodeChanging(value);
					this.SendPropertyChanging();
					this._VerifyCode = value;
					this.SendPropertyChanged("VerifyCode");
					this.OnVerifyCodeChanged();
				}
			}
		}
		
		[Association(Name="Enrollee_Machine", Storage="_Enrollee", ThisKey="EnrolleeId", OtherKey="EnrolleeId", IsForeignKey=true)]
		public Enrollee Enrollee
		{
			get
			{
				return this._Enrollee.Entity;
			}
			set
			{
				Enrollee previousValue = this._Enrollee.Entity;
				if (((previousValue != value) 
							|| (this._Enrollee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enrollee.Entity = null;
						previousValue.Machines.Remove(this);
					}
					this._Enrollee.Entity = value;
					if ((value != null))
					{
						value.Machines.Add(this);
						this._EnrolleeId = value.EnrolleeId;
					}
					else
					{
						this._EnrolleeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enrollee");
				}
			}
		}
		
		[Association(Name="MachineInstance_Machine", Storage="_MachineInstance", ThisKey="MachineInsId", OtherKey="MachineInsId", IsForeignKey=true, DeleteRule="CASCADE")]
		public MachineInstance MachineInstance
		{
			get
			{
				return this._MachineInstance.Entity;
			}
			set
			{
				MachineInstance previousValue = this._MachineInstance.Entity;
				if (((previousValue != value) 
							|| (this._MachineInstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MachineInstance.Entity = null;
						previousValue.Machines.Remove(this);
					}
					this._MachineInstance.Entity = value;
					if ((value != null))
					{
						value.Machines.Add(this);
						this._MachineInsId = value.MachineInsId;
					}
					else
					{
						this._MachineInsId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MachineInstance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MacDumpLogs")]
	public partial class MacDumpLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MacDumpId;
		
		private System.Nullable<int> _EnrolleeId;
		
		private System.Nullable<int> _MachineNo;
		
		private System.Nullable<int> _EnrolleeNo;
		
		private System.Nullable<int> _MachineInsId;
		
		private string _MacDumpDate;
		
		private string _MacDumpTime;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
		private EntityRef<MachineInstance> _MachineInstance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMacDumpIdChanging(int value);
    partial void OnMacDumpIdChanged();
    partial void OnEnrolleeIdChanging(System.Nullable<int> value);
    partial void OnEnrolleeIdChanged();
    partial void OnMachineNoChanging(System.Nullable<int> value);
    partial void OnMachineNoChanged();
    partial void OnEnrolleeNoChanging(System.Nullable<int> value);
    partial void OnEnrolleeNoChanged();
    partial void OnMachineInsIdChanging(System.Nullable<int> value);
    partial void OnMachineInsIdChanged();
    partial void OnMacDumpDateChanging(string value);
    partial void OnMacDumpDateChanged();
    partial void OnMacDumpTimeChanging(string value);
    partial void OnMacDumpTimeChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public MacDumpLog()
		{
			this._MachineInstance = default(EntityRef<MachineInstance>);
			OnCreated();
		}
		
		[Column(Storage="_MacDumpId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MacDumpId
		{
			get
			{
				return this._MacDumpId;
			}
			set
			{
				if ((this._MacDumpId != value))
				{
					this.OnMacDumpIdChanging(value);
					this.SendPropertyChanging();
					this._MacDumpId = value;
					this.SendPropertyChanged("MacDumpId");
					this.OnMacDumpIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeId", DbType="Int")]
		public System.Nullable<int> EnrolleeId
		{
			get
			{
				return this._EnrolleeId;
			}
			set
			{
				if ((this._EnrolleeId != value))
				{
					this.OnEnrolleeIdChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeId = value;
					this.SendPropertyChanged("EnrolleeId");
					this.OnEnrolleeIdChanged();
				}
			}
		}
		
		[Column(Storage="_MachineNo", DbType="Int")]
		public System.Nullable<int> MachineNo
		{
			get
			{
				return this._MachineNo;
			}
			set
			{
				if ((this._MachineNo != value))
				{
					this.OnMachineNoChanging(value);
					this.SendPropertyChanging();
					this._MachineNo = value;
					this.SendPropertyChanged("MachineNo");
					this.OnMachineNoChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeNo", DbType="Int")]
		public System.Nullable<int> EnrolleeNo
		{
			get
			{
				return this._EnrolleeNo;
			}
			set
			{
				if ((this._EnrolleeNo != value))
				{
					this.OnEnrolleeNoChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeNo = value;
					this.SendPropertyChanged("EnrolleeNo");
					this.OnEnrolleeNoChanged();
				}
			}
		}
		
		[Column(Storage="_MachineInsId", DbType="Int")]
		public System.Nullable<int> MachineInsId
		{
			get
			{
				return this._MachineInsId;
			}
			set
			{
				if ((this._MachineInsId != value))
				{
					if (this._MachineInstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineInsIdChanging(value);
					this.SendPropertyChanging();
					this._MachineInsId = value;
					this.SendPropertyChanged("MachineInsId");
					this.OnMachineInsIdChanged();
				}
			}
		}
		
		[Column(Storage="_MacDumpDate", DbType="NChar(12)")]
		public string MacDumpDate
		{
			get
			{
				return this._MacDumpDate;
			}
			set
			{
				if ((this._MacDumpDate != value))
				{
					this.OnMacDumpDateChanging(value);
					this.SendPropertyChanging();
					this._MacDumpDate = value;
					this.SendPropertyChanged("MacDumpDate");
					this.OnMacDumpDateChanged();
				}
			}
		}
		
		[Column(Storage="_MacDumpTime", DbType="NChar(12)")]
		public string MacDumpTime
		{
			get
			{
				return this._MacDumpTime;
			}
			set
			{
				if ((this._MacDumpTime != value))
				{
					this.OnMacDumpTimeChanging(value);
					this.SendPropertyChanging();
					this._MacDumpTime = value;
					this.SendPropertyChanged("MacDumpTime");
					this.OnMacDumpTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		[Association(Name="MachineInstance_MacDumpLog", Storage="_MachineInstance", ThisKey="MachineInsId", OtherKey="MachineInsId", IsForeignKey=true, DeleteRule="CASCADE")]
		public MachineInstance MachineInstance
		{
			get
			{
				return this._MachineInstance.Entity;
			}
			set
			{
				MachineInstance previousValue = this._MachineInstance.Entity;
				if (((previousValue != value) 
							|| (this._MachineInstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MachineInstance.Entity = null;
						previousValue.MacDumpLogs.Remove(this);
					}
					this._MachineInstance.Entity = value;
					if ((value != null))
					{
						value.MacDumpLogs.Add(this);
						this._MachineInsId = value.MachineInsId;
					}
					else
					{
						this._MachineInsId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MachineInstance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Miscellaneous")]
	public partial class Miscellaneous : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MiscId;
		
		private System.Nullable<int> _MiscGraceInAM;
		
		private System.Nullable<int> _MiscGraceInPM;
		
		private System.Nullable<int> _MiscGraceInOT;
		
		private System.Nullable<double> _MiscRegularHours;
		
		private string _MiscRegularLabel;
		
		private string _MiscOverRegularLabel;
		
		private string _MiscUnderRegularLabel;
		
		private System.Nullable<bool> _MiscActive;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMiscIdChanging(int value);
    partial void OnMiscIdChanged();
    partial void OnMiscGraceInAMChanging(System.Nullable<int> value);
    partial void OnMiscGraceInAMChanged();
    partial void OnMiscGraceInPMChanging(System.Nullable<int> value);
    partial void OnMiscGraceInPMChanged();
    partial void OnMiscGraceInOTChanging(System.Nullable<int> value);
    partial void OnMiscGraceInOTChanged();
    partial void OnMiscRegularHoursChanging(System.Nullable<double> value);
    partial void OnMiscRegularHoursChanged();
    partial void OnMiscRegularLabelChanging(string value);
    partial void OnMiscRegularLabelChanged();
    partial void OnMiscOverRegularLabelChanging(string value);
    partial void OnMiscOverRegularLabelChanged();
    partial void OnMiscUnderRegularLabelChanging(string value);
    partial void OnMiscUnderRegularLabelChanged();
    partial void OnMiscActiveChanging(System.Nullable<bool> value);
    partial void OnMiscActiveChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public Miscellaneous()
		{
			OnCreated();
		}
		
		[Column(Storage="_MiscId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MiscId
		{
			get
			{
				return this._MiscId;
			}
			set
			{
				if ((this._MiscId != value))
				{
					this.OnMiscIdChanging(value);
					this.SendPropertyChanging();
					this._MiscId = value;
					this.SendPropertyChanged("MiscId");
					this.OnMiscIdChanged();
				}
			}
		}
		
		[Column(Storage="_MiscGraceInAM", DbType="Int")]
		public System.Nullable<int> MiscGraceInAM
		{
			get
			{
				return this._MiscGraceInAM;
			}
			set
			{
				if ((this._MiscGraceInAM != value))
				{
					this.OnMiscGraceInAMChanging(value);
					this.SendPropertyChanging();
					this._MiscGraceInAM = value;
					this.SendPropertyChanged("MiscGraceInAM");
					this.OnMiscGraceInAMChanged();
				}
			}
		}
		
		[Column(Storage="_MiscGraceInPM", DbType="Int")]
		public System.Nullable<int> MiscGraceInPM
		{
			get
			{
				return this._MiscGraceInPM;
			}
			set
			{
				if ((this._MiscGraceInPM != value))
				{
					this.OnMiscGraceInPMChanging(value);
					this.SendPropertyChanging();
					this._MiscGraceInPM = value;
					this.SendPropertyChanged("MiscGraceInPM");
					this.OnMiscGraceInPMChanged();
				}
			}
		}
		
		[Column(Storage="_MiscGraceInOT", DbType="Int")]
		public System.Nullable<int> MiscGraceInOT
		{
			get
			{
				return this._MiscGraceInOT;
			}
			set
			{
				if ((this._MiscGraceInOT != value))
				{
					this.OnMiscGraceInOTChanging(value);
					this.SendPropertyChanging();
					this._MiscGraceInOT = value;
					this.SendPropertyChanged("MiscGraceInOT");
					this.OnMiscGraceInOTChanged();
				}
			}
		}
		
		[Column(Storage="_MiscRegularHours", DbType="Float")]
		public System.Nullable<double> MiscRegularHours
		{
			get
			{
				return this._MiscRegularHours;
			}
			set
			{
				if ((this._MiscRegularHours != value))
				{
					this.OnMiscRegularHoursChanging(value);
					this.SendPropertyChanging();
					this._MiscRegularHours = value;
					this.SendPropertyChanged("MiscRegularHours");
					this.OnMiscRegularHoursChanged();
				}
			}
		}
		
		[Column(Storage="_MiscRegularLabel", DbType="NChar(20)")]
		public string MiscRegularLabel
		{
			get
			{
				return this._MiscRegularLabel;
			}
			set
			{
				if ((this._MiscRegularLabel != value))
				{
					this.OnMiscRegularLabelChanging(value);
					this.SendPropertyChanging();
					this._MiscRegularLabel = value;
					this.SendPropertyChanged("MiscRegularLabel");
					this.OnMiscRegularLabelChanged();
				}
			}
		}
		
		[Column(Storage="_MiscOverRegularLabel", DbType="NChar(20)")]
		public string MiscOverRegularLabel
		{
			get
			{
				return this._MiscOverRegularLabel;
			}
			set
			{
				if ((this._MiscOverRegularLabel != value))
				{
					this.OnMiscOverRegularLabelChanging(value);
					this.SendPropertyChanging();
					this._MiscOverRegularLabel = value;
					this.SendPropertyChanged("MiscOverRegularLabel");
					this.OnMiscOverRegularLabelChanged();
				}
			}
		}
		
		[Column(Storage="_MiscUnderRegularLabel", DbType="NChar(20)")]
		public string MiscUnderRegularLabel
		{
			get
			{
				return this._MiscUnderRegularLabel;
			}
			set
			{
				if ((this._MiscUnderRegularLabel != value))
				{
					this.OnMiscUnderRegularLabelChanging(value);
					this.SendPropertyChanging();
					this._MiscUnderRegularLabel = value;
					this.SendPropertyChanged("MiscUnderRegularLabel");
					this.OnMiscUnderRegularLabelChanged();
				}
			}
		}
		
		[Column(Storage="_MiscActive", DbType="Bit")]
		public System.Nullable<bool> MiscActive
		{
			get
			{
				return this._MiscActive;
			}
			set
			{
				if ((this._MiscActive != value))
				{
					this.OnMiscActiveChanging(value);
					this.SendPropertyChanging();
					this._MiscActive = value;
					this.SendPropertyChanged("MiscActive");
					this.OnMiscActiveChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DTRs")]
	public partial class DTR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DTRId;
		
		private System.Nullable<int> _EnrolleeId;
		
		private System.Nullable<int> _EnrolleeNo;
		
		private System.Nullable<System.DateTime> _DTRDate;
		
		private string _DTRDay;
		
		private string _TimeInAM;
		
		private string _TimeOutAM;
		
		private string _TimeInPM;
		
		private string _TimeOutPM;
		
		private string _TimeInOT;
		
		private string _TimeOutOT;
		
		private System.Nullable<double> _TotalHours;
		
		private System.Nullable<double> _TotalMinute;
		
		private System.Nullable<double> _TotalHour;
		
		private string _DTRStatus;
		
		private System.Nullable<bool> _IsSource;
		
		private string _EditedBy;
		
		private System.Nullable<System.DateTime> _EditedOn;
		
		private EntityRef<Enrollee> _Enrollee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDTRIdChanging(int value);
    partial void OnDTRIdChanged();
    partial void OnEnrolleeIdChanging(System.Nullable<int> value);
    partial void OnEnrolleeIdChanged();
    partial void OnEnrolleeNoChanging(System.Nullable<int> value);
    partial void OnEnrolleeNoChanged();
    partial void OnDTRDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDTRDateChanged();
    partial void OnDTRDayChanging(string value);
    partial void OnDTRDayChanged();
    partial void OnTimeInAMChanging(string value);
    partial void OnTimeInAMChanged();
    partial void OnTimeOutAMChanging(string value);
    partial void OnTimeOutAMChanged();
    partial void OnTimeInPMChanging(string value);
    partial void OnTimeInPMChanged();
    partial void OnTimeOutPMChanging(string value);
    partial void OnTimeOutPMChanged();
    partial void OnTimeInOTChanging(string value);
    partial void OnTimeInOTChanged();
    partial void OnTimeOutOTChanging(string value);
    partial void OnTimeOutOTChanged();
    partial void OnTotalHoursChanging(System.Nullable<double> value);
    partial void OnTotalHoursChanged();
    partial void OnTotalMinuteChanging(System.Nullable<double> value);
    partial void OnTotalMinuteChanged();
    partial void OnTotalHourChanging(System.Nullable<double> value);
    partial void OnTotalHourChanged();
    partial void OnDTRStatusChanging(string value);
    partial void OnDTRStatusChanged();
    partial void OnIsSourceChanging(System.Nullable<bool> value);
    partial void OnIsSourceChanged();
    partial void OnEditedByChanging(string value);
    partial void OnEditedByChanged();
    partial void OnEditedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedOnChanged();
    #endregion
		
		public DTR()
		{
			this._Enrollee = default(EntityRef<Enrollee>);
			OnCreated();
		}
		
		[Column(Storage="_DTRId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DTRId
		{
			get
			{
				return this._DTRId;
			}
			set
			{
				if ((this._DTRId != value))
				{
					this.OnDTRIdChanging(value);
					this.SendPropertyChanging();
					this._DTRId = value;
					this.SendPropertyChanged("DTRId");
					this.OnDTRIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeId", DbType="Int")]
		public System.Nullable<int> EnrolleeId
		{
			get
			{
				return this._EnrolleeId;
			}
			set
			{
				if ((this._EnrolleeId != value))
				{
					if (this._Enrollee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrolleeIdChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeId = value;
					this.SendPropertyChanged("EnrolleeId");
					this.OnEnrolleeIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnrolleeNo", DbType="Int")]
		public System.Nullable<int> EnrolleeNo
		{
			get
			{
				return this._EnrolleeNo;
			}
			set
			{
				if ((this._EnrolleeNo != value))
				{
					this.OnEnrolleeNoChanging(value);
					this.SendPropertyChanging();
					this._EnrolleeNo = value;
					this.SendPropertyChanged("EnrolleeNo");
					this.OnEnrolleeNoChanged();
				}
			}
		}
		
		[Column(Storage="_DTRDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DTRDate
		{
			get
			{
				return this._DTRDate;
			}
			set
			{
				if ((this._DTRDate != value))
				{
					this.OnDTRDateChanging(value);
					this.SendPropertyChanging();
					this._DTRDate = value;
					this.SendPropertyChanged("DTRDate");
					this.OnDTRDateChanged();
				}
			}
		}
		
		[Column(Storage="_DTRDay", DbType="NChar(10)")]
		public string DTRDay
		{
			get
			{
				return this._DTRDay;
			}
			set
			{
				if ((this._DTRDay != value))
				{
					this.OnDTRDayChanging(value);
					this.SendPropertyChanging();
					this._DTRDay = value;
					this.SendPropertyChanged("DTRDay");
					this.OnDTRDayChanged();
				}
			}
		}
		
		[Column(Storage="_TimeInAM", DbType="NChar(10)")]
		public string TimeInAM
		{
			get
			{
				return this._TimeInAM;
			}
			set
			{
				if ((this._TimeInAM != value))
				{
					this.OnTimeInAMChanging(value);
					this.SendPropertyChanging();
					this._TimeInAM = value;
					this.SendPropertyChanged("TimeInAM");
					this.OnTimeInAMChanged();
				}
			}
		}
		
		[Column(Storage="_TimeOutAM", DbType="NChar(10)")]
		public string TimeOutAM
		{
			get
			{
				return this._TimeOutAM;
			}
			set
			{
				if ((this._TimeOutAM != value))
				{
					this.OnTimeOutAMChanging(value);
					this.SendPropertyChanging();
					this._TimeOutAM = value;
					this.SendPropertyChanged("TimeOutAM");
					this.OnTimeOutAMChanged();
				}
			}
		}
		
		[Column(Storage="_TimeInPM", DbType="NChar(10)")]
		public string TimeInPM
		{
			get
			{
				return this._TimeInPM;
			}
			set
			{
				if ((this._TimeInPM != value))
				{
					this.OnTimeInPMChanging(value);
					this.SendPropertyChanging();
					this._TimeInPM = value;
					this.SendPropertyChanged("TimeInPM");
					this.OnTimeInPMChanged();
				}
			}
		}
		
		[Column(Storage="_TimeOutPM", DbType="NChar(10)")]
		public string TimeOutPM
		{
			get
			{
				return this._TimeOutPM;
			}
			set
			{
				if ((this._TimeOutPM != value))
				{
					this.OnTimeOutPMChanging(value);
					this.SendPropertyChanging();
					this._TimeOutPM = value;
					this.SendPropertyChanged("TimeOutPM");
					this.OnTimeOutPMChanged();
				}
			}
		}
		
		[Column(Storage="_TimeInOT", DbType="NChar(10)")]
		public string TimeInOT
		{
			get
			{
				return this._TimeInOT;
			}
			set
			{
				if ((this._TimeInOT != value))
				{
					this.OnTimeInOTChanging(value);
					this.SendPropertyChanging();
					this._TimeInOT = value;
					this.SendPropertyChanged("TimeInOT");
					this.OnTimeInOTChanged();
				}
			}
		}
		
		[Column(Storage="_TimeOutOT", DbType="NChar(10)")]
		public string TimeOutOT
		{
			get
			{
				return this._TimeOutOT;
			}
			set
			{
				if ((this._TimeOutOT != value))
				{
					this.OnTimeOutOTChanging(value);
					this.SendPropertyChanging();
					this._TimeOutOT = value;
					this.SendPropertyChanged("TimeOutOT");
					this.OnTimeOutOTChanged();
				}
			}
		}
		
		[Column(Storage="_TotalHours", DbType="Float")]
		public System.Nullable<double> TotalHours
		{
			get
			{
				return this._TotalHours;
			}
			set
			{
				if ((this._TotalHours != value))
				{
					this.OnTotalHoursChanging(value);
					this.SendPropertyChanging();
					this._TotalHours = value;
					this.SendPropertyChanged("TotalHours");
					this.OnTotalHoursChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMinute", DbType="Float")]
		public System.Nullable<double> TotalMinute
		{
			get
			{
				return this._TotalMinute;
			}
			set
			{
				if ((this._TotalMinute != value))
				{
					this.OnTotalMinuteChanging(value);
					this.SendPropertyChanging();
					this._TotalMinute = value;
					this.SendPropertyChanged("TotalMinute");
					this.OnTotalMinuteChanged();
				}
			}
		}
		
		[Column(Storage="_TotalHour", DbType="Float")]
		public System.Nullable<double> TotalHour
		{
			get
			{
				return this._TotalHour;
			}
			set
			{
				if ((this._TotalHour != value))
				{
					this.OnTotalHourChanging(value);
					this.SendPropertyChanging();
					this._TotalHour = value;
					this.SendPropertyChanged("TotalHour");
					this.OnTotalHourChanged();
				}
			}
		}
		
		[Column(Storage="_DTRStatus", DbType="NChar(15)")]
		public string DTRStatus
		{
			get
			{
				return this._DTRStatus;
			}
			set
			{
				if ((this._DTRStatus != value))
				{
					this.OnDTRStatusChanging(value);
					this.SendPropertyChanging();
					this._DTRStatus = value;
					this.SendPropertyChanged("DTRStatus");
					this.OnDTRStatusChanged();
				}
			}
		}
		
		[Column(Storage="_IsSource", DbType="Bit")]
		public System.Nullable<bool> IsSource
		{
			get
			{
				return this._IsSource;
			}
			set
			{
				if ((this._IsSource != value))
				{
					this.OnIsSourceChanging(value);
					this.SendPropertyChanging();
					this._IsSource = value;
					this.SendPropertyChanged("IsSource");
					this.OnIsSourceChanged();
				}
			}
		}
		
		[Column(Storage="_EditedBy", DbType="VarChar(50)")]
		public string EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[Column(Storage="_EditedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedOn
		{
			get
			{
				return this._EditedOn;
			}
			set
			{
				if ((this._EditedOn != value))
				{
					this.OnEditedOnChanging(value);
					this.SendPropertyChanging();
					this._EditedOn = value;
					this.SendPropertyChanged("EditedOn");
					this.OnEditedOnChanged();
				}
			}
		}
		
		[Association(Name="Enrollee_DTR", Storage="_Enrollee", ThisKey="EnrolleeId", OtherKey="EnrolleeId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Enrollee Enrollee
		{
			get
			{
				return this._Enrollee.Entity;
			}
			set
			{
				Enrollee previousValue = this._Enrollee.Entity;
				if (((previousValue != value) 
							|| (this._Enrollee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enrollee.Entity = null;
						previousValue.DTRs.Remove(this);
					}
					this._Enrollee.Entity = value;
					if ((value != null))
					{
						value.DTRs.Add(this);
						this._EnrolleeId = value.EnrolleeId;
					}
					else
					{
						this._EnrolleeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enrollee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private string _CompanyName;
		
		private string _CompanyAddress;
		
		private string _CompanyContact;
		
		private System.Nullable<bool> _CompanyActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCompanyAddressChanging(string value);
    partial void OnCompanyAddressChanged();
    partial void OnCompanyContactChanging(string value);
    partial void OnCompanyContactChanged();
    partial void OnCompanyActiveChanging(System.Nullable<bool> value);
    partial void OnCompanyActiveChanged();
    #endregion
		
		public Company()
		{
			OnCreated();
		}
		
		[Column(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="VarChar(100)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyAddress", DbType="VarChar(200)")]
		public string CompanyAddress
		{
			get
			{
				return this._CompanyAddress;
			}
			set
			{
				if ((this._CompanyAddress != value))
				{
					this.OnCompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddress = value;
					this.SendPropertyChanged("CompanyAddress");
					this.OnCompanyAddressChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyContact", DbType="VarChar(50)")]
		public string CompanyContact
		{
			get
			{
				return this._CompanyContact;
			}
			set
			{
				if ((this._CompanyContact != value))
				{
					this.OnCompanyContactChanging(value);
					this.SendPropertyChanging();
					this._CompanyContact = value;
					this.SendPropertyChanged("CompanyContact");
					this.OnCompanyContactChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyActive", DbType="Bit")]
		public System.Nullable<bool> CompanyActive
		{
			get
			{
				return this._CompanyActive;
			}
			set
			{
				if ((this._CompanyActive != value))
				{
					this.OnCompanyActiveChanging(value);
					this.SendPropertyChanging();
					this._CompanyActive = value;
					this.SendPropertyChanged("CompanyActive");
					this.OnCompanyActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class SPLoadEnrolleeAllResult
	{
		
		private int _EnrolleeId;
		
		private System.Nullable<int> _EnrolleeNo;
		
		private string _EnrolleeIdNo;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _Sex;
		
		private string _Address;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<System.DateTime> _DateHired;
		
		private string _PositionName;
		
		private string _DepartmentName;
		
		private System.Nullable<bool> _IsActive;
		
		public SPLoadEnrolleeAllResult()
		{
		}
		
		[Column(Storage="_EnrolleeId", DbType="Int NOT NULL")]
		public int EnrolleeId
		{
			get
			{
				return this._EnrolleeId;
			}
			set
			{
				if ((this._EnrolleeId != value))
				{
					this._EnrolleeId = value;
				}
			}
		}
		
		[Column(Storage="_EnrolleeNo", DbType="Int")]
		public System.Nullable<int> EnrolleeNo
		{
			get
			{
				return this._EnrolleeNo;
			}
			set
			{
				if ((this._EnrolleeNo != value))
				{
					this._EnrolleeNo = value;
				}
			}
		}
		
		[Column(Storage="_EnrolleeIdNo", DbType="NChar(15)")]
		public string EnrolleeIdNo
		{
			get
			{
				return this._EnrolleeIdNo;
			}
			set
			{
				if ((this._EnrolleeIdNo != value))
				{
					this._EnrolleeIdNo = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NChar(30)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="NChar(30)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="NChar(10)")]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this._Sex = value;
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this._BirthDate = value;
				}
			}
		}
		
		[Column(Storage="_DateHired", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateHired
		{
			get
			{
				return this._DateHired;
			}
			set
			{
				if ((this._DateHired != value))
				{
					this._DateHired = value;
				}
			}
		}
		
		[Column(Storage="_PositionName", DbType="VarChar(50)")]
		public string PositionName
		{
			get
			{
				return this._PositionName;
			}
			set
			{
				if ((this._PositionName != value))
				{
					this._PositionName = value;
				}
			}
		}
		
		[Column(Storage="_DepartmentName", DbType="VarChar(50)")]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this._DepartmentName = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
